    template<typename LHS, typename RHS, typename BinaryOp, typename Result>
    struct array1_proxy_array1_idx_op_atom
            : public array1_exp<array1_proxy_array1_idx_op_atom<LHS, RHS, BinaryOp, Result>> {
        array1_proxy_array1_idx_op_atom(const array1_exp<LHS> &lhs, const RHS &rhs, BinaryOp &&bo)
                : lhs(lhs), rhs(rhs), bo(std::forward<BinaryOp>(bo)) {
        }

        Result operator[](ptrdiff_t idx) const {
            return bo(lhs()[idx], rhs);
        }

        ptrdiff_t size() const {
            return lhs().size();
        }

    private:
        const array1_exp<LHS> &lhs;
        const RHS             &rhs;
        BinaryOp              &&bo;
    };

    template<typename E>
    struct array1_proxy_horzcat_atom_array1
            : public array1_exp<array1_proxy_horzcat_atom_array1<E>> {

        typedef typename E::value_type      value_type;
        typedef typename E::reference       reference;
        typedef typename E::const_reference const_reference;
        typedef typename E::const_pointer   const_pointer;

        array1_proxy_horzcat_atom_array1(const value_type &lhs, const array1_exp<E> &rhs) : lhs(lhs), rhs(rhs) {
        }

        const_reference operator[](ptrdiff_t idx) const {
            return idx == 0 ? lhs : rhs()[idx - 1];
        }

        ptrdiff_t size() const {
            return rhs().size() + 1;
        }

    private:
        const value_type    &lhs;
        const array1_exp<E> &rhs;
    };

    template<typename LHS>
    array1_proxy_array1_idx_op_atom<LHS, typename LHS::value_type, std::equal_to<typename LHS::value_type>, bool> operator==(
            const array1_exp<LHS> &x,
            const typename LHS::value_type &y) {
        return array1_proxy_array1_idx_op_atom<LHS, typename LHS::value_type, std::equal_to<typename LHS::value_type>, bool>(
                x,
                y,
                std::equal_to<typename LHS::value_type>());
    }

    template<typename T>
    array1_proxy_horzcat_atom_array1<T> horzcat(const typename T::value_type &lhs, const array1_exp<T> &rhs) {
        return array1_proxy_horzcat_atom_array1<T>(lhs, rhs);
    }

    template<typename E>
    struct array1_proxy_slice
            : public array1_exp<array1_proxy_slice<E>> {
        typedef typename E::value_type      value_type;
        typedef typename E::reference       reference;
        typedef typename E::const_reference const_reference;
        typedef typename E::const_pointer   const_pointer;

        array1_proxy_slice(const array1_exp<E> &a, ptrdiff_t lo, ptrdiff_t hi) : a(a), lo(lo), hi(hi) {
        }

        const_reference operator[](ptrdiff_t idx) const {
            return at(a(), lo + idx);
        }

        ptrdiff_t size() const {
            return hi - lo;
        }

    private:
        const array1_exp<E> &a;
        ptrdiff_t           lo, hi;

    };

    template<typename E>
    array1_proxy_slice<E> slice(const array1_exp<E> &rhs, ptrdiff_t lower, ptrdiff_t upper) {
        return array1_proxy_slice<E>(rhs, lower, upper);
    }

    template<typename T>
    array1<T> slice(const array1_exp<array1<T>> &rhs, ptrdiff_t lower, ptrdiff_t upper) {
        return rhs().slice(lower, upper);
    }

    template<typename E1, typename T2>
    darray1<array1<T2>> cut(const array1_exp<E1> &x, const array1<T2> &y) {
        darray1<array1<T2>> result;
        const ptrdiff_t     N = x().size();
        result.reserve(N);
        for (ptrdiff_t i = 0; i < N; ++i) {
            const ptrdiff_t lo = x()[i];
            const ptrdiff_t hi = i + 1 == N ? y.size() : x()[i + 1];
            result.push_back(y.slice(lo, hi));
        }
        return result;
    }

    template<typename E1, typename E2>
    darray1<array1_proxy_slice<E2>> cut(const array1_exp<E1> &x, const array1_exp<E2> &y) {
        darray1<array1_proxy_slice<E2>> result;
        const ptrdiff_t                 N = x().size();
        result.reserve(N);
        for (ptrdiff_t i = 0; i < N; ++i) {
            const ptrdiff_t lo = x()[i];
            const ptrdiff_t hi = i + 1 == N ? y().size() : x()[i + 1];
            result.push_back(slice(y(), lo, hi));
        }
        return result;
    }
    template<typename Unary, typename E>
    struct array1_proxy_f_array1
            : public array1_exp<array1_proxy_f_array1<Unary, E>> {
        typedef decltype(std::declval<Unary>()(std::declval<typename E::const_reference>())) value_type;
        typedef value_type                                                                   reference;
        typedef value_type                                                                   const_reference;
        typedef const value_type                                                             *const_pointer;

        array1_proxy_f_array1(Unary &&f, const array1_exp<E> &e) : f(std::forward<Unary>(f)), e(e) {
        }

        const_reference operator[](ptrdiff_t idx) const {
            return f(at(e(), idx));
        }

        ptrdiff_t size() const {
            return e().size();
        }

    private:
        Unary               &&f;
        const array1_exp<E> &e;
    };

    template<typename Unary, typename E>
    array1_proxy_f_array1<Unary, E> each(Unary &&f, const array1_exp<E> &e) {
        return array1_proxy_f_array1<Unary, E>(std::forward<Unary>(f), e);
    }
    struct drop_bound1 {
        drop_bound1(ptrdiff_t x) : x(x) {
        }

        template<typename E>
        array1_proxy_slice<E> operator()(const array1_exp<E> &e) const {
            return x >= 0 ? array1_proxy_slice<E>(e, x, e().size()) : array1_proxy_slice<E>(e, 0, e().size() + x);
        }

        template<typename T>
        array1<T> operator()(const array1<T> &a) const {
            return x >= 0 ? a.slice(x, a.size()) : a.slice(0, a.size() + x);
        }

    private:
        ptrdiff_t x;
    };

    drop_bound1 drop(ptrdiff_t x) {
        return drop_bound1(x);
    }
